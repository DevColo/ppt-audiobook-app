import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:precious/providers/audio_player_provider.dart';
import 'package:precious/utils/config.dart';
import 'package:share_plus/share_plus.dart';
import 'package:http/http.dart' as http;
import 'dart:io';
import 'package:path_provider/path_provider.dart';
import 'package:precious/providers/audio_books_provider.dart';

class ChapterAudioScreen extends StatefulWidget {
  final int bookID;
  final String bookTitle;
  final String chapterName;
  final String audioUrl;
  final String imageUrl;
  final int chapterIndex;
  final Function(int) onNavigateToChapter;

  const ChapterAudioScreen({
    super.key,
    required this.bookID,
    required this.bookTitle,
    required this.chapterName,
    required this.audioUrl,
    required this.imageUrl,
    required this.chapterIndex,
    required this.onNavigateToChapter,
  });

  @override
  State<ChapterAudioScreen> createState() => _ChapterAudioScreenState();
}

class _ChapterAudioScreenState extends State<ChapterAudioScreen> {
  bool isDownloading = false;
  double downloadProgress = 0.0;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _startAudio();
    });
  }

  Future<void> _startAudio() async {
    final audioProvider =
        Provider.of<AudioPlayerProvider>(context, listen: false);

    await audioProvider.playAudio(
      url: widget.audioUrl,
      chapterName: widget.chapterName,
      bookTitle: widget.bookTitle,
      imageUrl: widget.imageUrl,
    );
  }

  Future<void> downloadAudio() async {
    setState(() {
      isDownloading = true;
      downloadProgress = 0.0;
    });

    try {
      final request = http.Request('GET', Uri.parse(widget.audioUrl));
      final response = await request.send();

      if (response.statusCode == 200) {
        final directory = await getApplicationDocumentsDirectory();
        final filename = '${widget.bookTitle}_${widget.chapterName}.mp3';
        final file = File('${directory.path}/$filename');

        final contentLength = response.contentLength ?? 0;
        int receivedLength = 0;
        final sink = file.openWrite();

        final progressStream = response.stream.asBroadcastStream();
        progressStream.listen(
          (List<int> chunk) {
            receivedLength += chunk.length;
            if (contentLength > 0) {
              setState(() {
                downloadProgress = receivedLength / contentLength;
              });
            }
            sink.add(chunk);
          },
          onDone: () async {
            await sink.close();
            setState(() {
              isDownloading = false;
              downloadProgress = 1.0;
            });

            Provider.of<AudioBooksProvider>(context, listen: false)
                .refreshDownloadedFiles();

            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('$filename downloaded successfully!')),
            );
          },
          onError: (error) {
            sink.close();
            setState(() {
              isDownloading = false;
              downloadProgress = 0.0;
            });
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('Error downloading file: $error')),
            );
          },
        );
      } else {
        throw Exception('Failed to download file');
      }
    } catch (e) {
      setState(() {
        isDownloading = false;
        downloadProgress = 0.0;
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error downloading: $e')),
      );
    }
  }

  void shareAudio() {
    Share.share(widget.audioUrl);
  }

  String formatDuration(Duration duration) {
    String twoDigits(int n) => n.toString().padLeft(2, '0');
    final minutes = twoDigits(duration.inMinutes.remainder(60));
    final seconds = twoDigits(duration.inSeconds.remainder(60));
    return "$minutes:$seconds";
  }

  @override
  Widget build(BuildContext context) {
    final audioProvider = Provider.of<AudioPlayerProvider>(context);

    return Scaffold(
      backgroundColor: Config.darkColor,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () => Navigator.pop(context),
        ),
        actions: [
          Stack(
            alignment: Alignment.center,
            children: [
              IconButton(
                icon: const Icon(Icons.download, color: Colors.white),
                onPressed: isDownloading ? null : downloadAudio,
              ),
              if (isDownloading)
                SizedBox(
                  width: 24,
                  height: 24,
                  child: CircularProgressIndicator(
                    color: Config.primaryColor,
                    value: downloadProgress,
                    strokeWidth: 2,
                  ),
                ),
            ],
          ),
          IconButton(
            icon: const Icon(Icons.share, color: Colors.white),
            onPressed: shareAudio,
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          children: [
            Container(
              width: 150,
              height: 200,
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(16),
                image: DecorationImage(
                  image: NetworkImage(widget.imageUrl),
                  fit: BoxFit.cover,
                ),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.4),
                    blurRadius: 10,
                  ),
                ],
              ),
            ),
            const SizedBox(height: 25),
            Text(
              widget.bookTitle,
              style: const TextStyle(
                color: Colors.white70,
                fontSize: 16,
                fontFamily: 'Montserrat-Regular',
              ),
            ),
            const SizedBox(height: 8),
            Text(
              widget.chapterName,
              style: const TextStyle(
                color: Colors.white,
                fontSize: 20,
                fontFamily: 'Montserrat-Bold',
              ),
              textAlign: TextAlign.center,
            ),
            const Spacer(),
            const SizedBox(height: 30),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                IconButton(
                  icon: const Icon(Icons.skip_previous,
                      color: Colors.white, size: 40),
                  onPressed: widget.chapterIndex > 0
                      ? () =>
                          widget.onNavigateToChapter(widget.chapterIndex - 1)
                      : null,
                ),
                GestureDetector(
                  onTap: () {
                    if (audioProvider.isPlaying) {
                      audioProvider.pauseAudio();
                    } else {
                      audioProvider.resumeAudio();
                    }
                  },
                  child: Container(
                    width: 80,
                    height: 80,
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      color: Config.primaryColor,
                      boxShadow: [
                        BoxShadow(
                          color: Config.primaryColor.withOpacity(0.5),
                          blurRadius: 10,
                        ),
                      ],
                    ),
                    child: Icon(
                      audioProvider.isPlaying ? Icons.pause : Icons.play_arrow,
                      color: Colors.white,
                      size: 50,
                    ),
                  ),
                ),
                IconButton(
                  icon: const Icon(Icons.skip_next,
                      color: Colors.white, size: 40),
                  onPressed: () =>
                      widget.onNavigateToChapter(widget.chapterIndex + 1),
                ),
              ],
            ),
            const SizedBox(height: 40),
          ],
        ),
      ),
    );
  }
}
